#define UP_KEY  'A'
#define LEFT_KEY  'D'
#define RIGHT_KEY  'C'
#define DOWN_KEY 'B'
#define ENTER_KEY 10
#define SNAKE_ARRAY_SIZE 310

const char SNAKE_HEAD = '@';
const char SNAKE_BODY = 'o';
const char WALL = 'W';
const char CEIL = 'W';
const char FOOD = '$';
const char BLANK = ' ';

void gotoxy(int x,int y)
{
    printf("%c[%d;%df",0x1B,y,x);
}


int kbhit(void)
{
    struct termios oldt, newt;
    int ch;
    int oldf;

    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
    fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

    ch = getchar();

    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    fcntl(STDIN_FILENO, F_SETFL, oldf);

    if(ch != EOF)
    {
        ungetc(ch, stdin);
        return 1;
    }

    return 0;
}

char getch()
{
    char c;
    system("stty raw");
    c= getchar();
    system("stty sane");
    return(c);
}

void clrscr()
{
    system("clear");
    return;
}

#define EXIT_BUTTON 27 //ESC
#define PAUSE_BUTTON 112 //P

char waitKey(void)
{
    int pressed;

    while(!kbhit());

    pressed = getch();
    return((char)pressed);
}

int getGameSpeed()
{
    int speed = 1;
    clrscr();

    while(speed < 1 || speed > 9){
            return(speed);
    }
    return 1;
}

int checkKeysPressed(int dir)
{
    int pressed;

    if(kbhit()) //If a key has been pressed
    {
        pressed=getch();
        if (dir != pressed)
        {
            if(pressed == DOWN_KEY && dir != UP_KEY)
                dir = pressed;
            else if (pressed == UP_KEY && dir != DOWN_KEY)
                dir = pressed;
            else if (pressed == LEFT_KEY && dir != RIGHT_KEY)
                dir = pressed;
            else if (pressed == RIGHT_KEY && dir != LEFT_KEY)
                dir = pressed;
        }
    }
    return(dir);
}


void moveSnakeArray(int snakeXY[][SNAKE_ARRAY_SIZE], int snakeLength, int direction)
{
    int i;
    for( i = snakeLength-1; i >= 1; i-- )
    {
        snakeXY[0][i] = snakeXY[0][i-1];
        snakeXY[1][i] = snakeXY[1][i-1];
    }
    
    switch(direction)
    {
        case DOWN_KEY:
            snakeXY[1][0]++;
            break;
        case RIGHT_KEY:
            snakeXY[0][0]++;
            break;
        case UP_KEY:
            snakeXY[1][0]--;
            break;
        case LEFT_KEY:
            snakeXY[0][0]--;
            break;
    }

    return;
}

void move(int snakeXY[][SNAKE_ARRAY_SIZE], int snakeLength, int direction)
{
    int x;
    int y;

    //qo열을 이동하기 전, tail(가장 뒤의 뱀 꼬리)제거
    x = snakeXY[0][snakeLength-1];
    y = snakeXY[1][snakeLength-1];

    gotoxy(x,y);
    printf("%c",BLANK);

    gotoxy(snakeXY[0][0],snakeXY[1][0]);
    printf("%c", SNAKE_BODY);

    moveSnakeArray(snakeXY, snakeLength, direction);

    gotoxy(snakeXY[0][0],snakeXY[1][0]);
    printf("%c",SNAKE_HEAD);

    gotoxy(1,1); 

    return;
}

int eatFood(int snakeXY[][SNAKE_ARRAY_SIZE], int foodXY[])
{
    if (snakeXY[0][0] == foodXY[0] && snakeXY[1][0] == foodXY[1]){
        foodXY[0] = 0;
        foodXY[1] = 0; 

        printf("\7"); //Beep
        return(1);}

    return(0);
}

int collisionDetection(int snakeXY[][SNAKE_ARRAY_SIZE], int consoleWidth, int consoleHeight, int snakeLength ) 
{
    int colision = 0;
    if ((snakeXY[0][0] == 1) || (snakeXY[1][0] == 1) || (snakeXY[0][0] == consoleWidth) || (snakeXY[1][0] == consoleHeight - 4)) //뱀이 벽과 충돌했는지 또는 스스로 충돌했는지 확인
        colision = 1;
    else
        if (collisionSnake(snakeXY[0][0], snakeXY[1][0], snakeXY, snakeLength, 1)) //만약 뱀이 벽에 충돌했다면, 뱀이 스스로 충돌했는지 확인할 필요가 없어짐.
            colision = 1;

    return(colision);
}

void menu(int score, int speed)
{
    gotoxy(5,23);
    printf("Score: %d", score);

    gotoxy(5,24);
    printf("Speed: %d", speed);

    gotoxy(52,23);
    printf("Coders : n/a");

    gotoxy(52,24);
    printf("Version: 0.1");

    return;
}
