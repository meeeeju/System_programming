void startGame( int snakeXY[][SNAKE_ARRAY_SIZE], int foodXY[], int consoleWidth, int consoleHeight, int snakeLength, int direction, int score, int speed)
{
    int gameOver = 0;
    clock_t endWait;

    //CLOCKS_PER_SEC-(n-1)*(CLOCKS_PER_SEC/10)
    int waitMili = CLOCKS_PER_SEC-(speed)*(CLOCKS_PER_SEC/10);  
    int tempScore = 10*speed;
    int oldDirection;
    int canChangeDirection = 1;
    //int seconds = 1;

    endWait = clock() + waitMili;

    do
    {
        if(canChangeDirection)
        {
            oldDirection = direction;
            direction = checkKeysPressed(direction);
        }

        if(oldDirection != direction)
            canChangeDirection = 0;

        if(clock() >= endWait) 
        {

            move(snakeXY, snakeLength, direction);
            canChangeDirection = 1;


            if(eatFood(snakeXY, foodXY))
            {
                generateFood( foodXY, consoleWidth, consoleHeight, snakeXY, snakeLength); 
                snakeLength++;
                score+=10;

                if( score >= 10*speed+tempScore)
                {
                    speed++;
                    tempScore = score;

                    if(speed <= 9)
                        waitMili = waitMili - (CLOCKS_PER_SEC/10);
                    else
                    {
                        if(waitMili >= 40) 
                            waitMili = waitMili - (CLOCKS_PER_SEC/200);

                    }

                }

                menu(score, speed);
            }

            endWait = clock() + waitMili;
        }

        gameOver = collisionDetection(snakeXY, consoleWidth, consoleHeight, snakeLength);

        if(snakeLength >= SNAKE_ARRAY_SIZE-5) 
        {
            gameOver = 2;//You Win
            score+=1500;
        }

    } while (!gameOver);

    switch(gameOver)
    {
        case 1:
            printf("\7"); //Beep
            printf("\7"); //Beep

            gameOverScreen();
            break;
    }

    return;
}


void loadEnviroment(int consoleWidth, int consoleHeight)
{
    //int i;
    int x = 1, y = 1;
    int rectangleHeight = consoleHeight - 4;
    clrscr(); //clear the console

    gotoxy(x,y); 

    for (; y < rectangleHeight; y++)
    {
        gotoxy(x, y); //Left Wall
        printf("%c",WALL);

        gotoxy(consoleWidth, y); //Right Wall
        printf("%c",WALL);
    }

    y = 1;
    for (; x < consoleWidth+1; x++)
    {
        gotoxy(x, y); //Left Wall
        printf("%c",WALL);

        gotoxy(x, rectangleHeight); //Right Wall
        printf("%c",WALL);
    }

    return;
}


void loadSnake(int snakeXY[][SNAKE_ARRAY_SIZE], int snakeLength)
{
    int i;
    for (i = 0; i < snakeLength; i++)
    {
        gotoxy(snakeXY[0][i], snakeXY[1][i]);
        printf("%c", SNAKE_BODY); 
    }

    return;
}


void prepairSnakeArray(int snakeXY[][SNAKE_ARRAY_SIZE], int snakeLength)
{
    int i;
    int snakeX = snakeXY[0][0];
    int snakeY = snakeXY[1][0];

    for(i = 1; i <= snakeLength; i++)
    {
        snakeXY[0][i] = snakeX + i;
        snakeXY[1][i] = snakeY;
    }

    return;
}
void loadGame(void)
{
    int snakeXY[2][SNAKE_ARRAY_SIZE]; 
    int snakeLength = 2; //Starting Length

    int direction = LEFT_KEY; 
    int foodXY[] = {5,5};
    int score = 0;
    //int level = 1;

    int consoleWidth = 80;
    int consoleHeight = 25;

    int speed = getGameSpeed();

    snakeXY[0][0] = 40;
    snakeXY[1][0] = 10;

    loadEnviroment(consoleWidth, consoleHeight); 
    prepairSnakeArray(snakeXY, snakeLength); 
    loadSnake(snakeXY, snakeLength); 
    generateFood( foodXY, consoleWidth, consoleHeight, snakeXY, snakeLength);
    menu(score, speed); 
    startGame(snakeXY, foodXY, consoleWidth, consoleHeight, snakeLength, direction, score, speed);

    return;
}


int main() 
{
    loadGame(); 

    return(0);
}
